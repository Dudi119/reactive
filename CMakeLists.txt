project(reactive CXX)
cmake_minimum_required(VERSION 3.0)

set (CMAKE_CXX_STANDARD 14)
set (CMAKE_CXX_STANDARD_REQUIRED ON)
set (CMAKE_COLOR_MAKEFILE ON)
set (CMAKE_CXX_EXTENSIONS OFF)

if(NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(Red "${Esc}[31m")
    set(Green "${Esc}[32m")
else()
    set(ColourReset "")
    set(Red "")
    set(Green "")
endif()

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "Default build type 'Debug'")
    set(CMAKE_BUILD_TYPE Debug CACHE STRING "" FORCE )
else()
    message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
endif()

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(CMAKE_DEBUG_POSTFIX d)
    set(POCO_SUFFIX d)
endif()
option(3RD_PARTY_INSTALL_STEP "3rd party install step" OFF)
option(COMPILE_STEP "Compile step" OFF)


set(SWEETPY_DEPEND_LIST "")
set(REACTIVE_DEPEND_LIST "")

set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(PROJECT_BUILD_DIR ${PROJECT_BINARY_DIR})
if(NOT PROJECT_3RD_LOC)
    set(PROJECT_3RD_LOC ${PROJECT_BINARY_DIR}/Third_Party)
endif()
if(NOT IS_ABSOLUTE ${PROJECT_3RD_LOC})
    get_filename_component(PROJECT_3RD_LOC ${PROJECT_3RD_LOC} ABSOLUTE BASE_DIR ${PROJECT_SOURCE_DIR})
endif()
string(FIND "${CMAKE_PREFIX_PATH}" "${PROJEC_3RD_LOC}" 3RD_LOC_PREFIX_ADDED)
if(NOT ${3RD_LOC_PREFIX_ADDED})
    list(APPEND CMAKE_PREFIX_PATH ${PROJECT_3RD_LOC})
endif()
option(WITH_PY_DEBUG "Use python debug build" OFF)
if(WITH_PY_DEBUG)
    message(STATUS "python debug macros are set - Py_TRACE_REF, Py_DEBUG, LLTRACE, Py_REF_DEBUG")
    add_definitions(-DPy_TRACE_REF -DPy_DEBUG -DLLTRACE -DPy_REF_DEBUG)
endif()
message(STATUS "third party installation path - ${PROJECT_3RD_LOC}")

find_package(Core)
find_package(Python)
find_package(SweetPy)

SET(TEST_DEPENDECIES "")
option(WITH_TESTS "Test support" ON)
if(WITH_TESTS)
    find_package(GoogleTest)
endif()

include(installThirdParty)

set(PROJECT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
if(NOT OUTPUT_DIR)
    set(OUTPUT_DIR ${PROJECT_BUILD_DIR}/bin)
endif()
if(NOT IS_ABSOLUTE ${OUTPUT_DIR})
    get_filename_component(OUTPUT_DIR ${OUTPUT_DIR} ABSOLUTE BASE_DIR ${PROJECT_BUILD_DIR})
endif()

if(NOT PYTHON_OUTPUT_DIR)
    set(PYTHON_OUTPUT_DIR ${PROJECT_DIR}/reactive_py)
endif()
if(NOT IS_ABSOLUTE ${PYTHON_OUTPUT_DIR})
    get_filename_component(PYTHON_OUTPUT_DIR ${PYTHON_OUTPUT_DIR} ABSOLUTE BASE_DIR ${PROJECT_SOURCE_DIR})
endif()
message(STATUS "Output dir - ${OUTPUT_DIR}")
message(STATUS "Python Output dir - ${PYTHON_OUTPUT_DIR}")

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${OUTPUT_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY  ${OUTPUT_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY  ${OUTPUT_DIR})
set(CMAKE_BINARY_DIR ${OUTPUT_DIR})
set(EXECUTABLE_OUTPUT_PATH ${OUTPUT_DIR})


link_directories(${PROJECT_3RD_LOC}/lib ${OUTPUT_DIR})
set(TO_LINK_LIBS pthread Core${CMAKE_DEBUG_POSTFIX}.so)

include_directories(${PROJECT_DIR}/src ${PROJECT_3RD_LOC}/include ${PYTHON_INCLUDE_DIRS})
add_library(reactive SHARED src/cpp/UnitNode.cpp src/cpp/UnitNode.h src/cpp/GraphEngine.cpp src/cpp/PyNode.cpp src/cpp/InputAdapter.h src/cpp/InputAdapter.cpp src/cpp/ConstNode.h src/cpp/ConstNode.cpp src/cpp/Event.cpp src/cpp/GraphNode.h src/cpp/CurveNode.cpp src/cpp/CurveNode.h)
if(REACTIVE_DEPEND_LIST)
    add_dependencies(reactive ${REACTIVE_DEPEND_LIST})
endif()
target_link_libraries(reactive ${TO_LINK_LIBS})
add_custom_command(TARGET reactive POST_BUILD
        COMMAND cmake -E copy_directory ${PROJECT_DIR}/src/python ${PYTHON_OUTPUT_DIR})

if(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -pedantic -Wno-unused-but-set-variable -Wno-sign-compare -Wno-unused-variable")
endif()

add_subdirectory(${PROJECT_DIR}/src)

if(WITH_TESTS)
    add_subdirectory(${PROJECT_DIR}/tests)
endif()

